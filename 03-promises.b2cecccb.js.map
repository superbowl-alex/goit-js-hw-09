{"mappings":"qhBACA,IAAAA,EAAAC,EAAA,SA2CA,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACaC,KAAKC,SAAW,GAEpCJ,EAAQ,C,SAAEH,E,MAAUC,IAEpBG,EAAO,C,SAAEJ,E,MAAUC,MAEpBA,OAjDM,CACXO,KAAMC,SAASC,cAAc,SAC7BT,MAAOQ,SAASC,cAAc,sBAC9BC,KAAMF,SAASC,cAAc,qBAC7BE,OAAQH,SAASC,cAAc,yBAI5BF,KAAKK,iBAAiB,UAG3B,SAAsBC,GACpBA,EAAEC,iBACF,MACEC,UAAYf,MAAAgB,EAAKN,KAAEA,EAAIC,OAAEA,IACvBE,EAAEI,cACN,IAAIC,GAAgBF,EAAMG,MACtBC,GAAeV,EAAKS,MACpBE,GAAiBV,EAAOQ,MAC5B,GAAIE,GAAiB,GAAKH,GAAgB,GAAKA,GAAgB,EAC7D,IAAK,IAAII,EAAI,EAAGA,GAAKD,EAAeC,IAClCxB,EAAcwB,EAAGJ,GACdK,MAAK,EAACxB,SAAEA,EAAQC,MAAEA,KACjBwB,EAAA5B,GAAS6B,OAAOC,QACd,uBAAqB3B,QAAiBC,SACrC2B,OAEJ,EAAO5B,WAAUC,WAChBwB,EAAA5B,GAAQ6B,OAACG,QAAO,sBACb7B,QAA8BC,SAGrCkB,GAAgBE,OAGlBI,EAAA5B,GAAS6B,OAAOI,QAAQ","sources":["src/js/03-promises.js"],"sourcesContent":["// import required packages\nimport Notiflix from 'notiflix';\n\n// create references to DOM elements\nconst refs = {\n  form: document.querySelector('.form'),\n  delay: document.querySelector('input[name=\"delay]'),\n  step: document.querySelector('input[name=\"step]'),\n  amount: document.querySelector('input[name=\"amount]'),\n};\n\n// add an eventListener to the submit form\nrefs.form.addEventListener('submit', onFormSubmit);\n\n// function that works on form submit\nfunction onFormSubmit(e) {\n  e.preventDefault();\n  const {\n    elements: { delay, step, amount },\n  } = e.currentTarget;\n  let currentDelay = +delay.value;\n  let currentStep = +step.value;\n  let currentAmount = +amount.value;\n  if (currentAmount >= 0 && currentDelay >= 0 && currentDelay >= 0) {\n    for (let i = 1; i <= currentAmount; i++) {\n      createPromise(i, currentDelay)\n        .then(({ position, delay }) =>\n          Notiflix.Notify.success(\n            `✅ Fulfilled promise ${position} in ${delay}ms`\n          )\n        )\n        .catch(({ position, delay }) =>\n          Notiflix.Notify.failure(\n            `❌ Rejected promise ${position} in ${delay}ms`\n          )\n        );\n      currentDelay += currentStep;\n    }\n  } else {\n    Notiflix.Notify.warning('Input values cannot be negative numbers');\n  }\n}\n\n// function that creates and returns a promise\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$eWCmQ","parcelRequire","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","setTimeout","Math","random","form","document","querySelector","step","amount","addEventListener","e","preventDefault","elements","delay1","currentTarget","currentDelay","value","currentStep","currentAmount","i","then","$parcel$interopDefault","Notify","success","catch","failure","warning"],"version":3,"file":"03-promises.b2cecccb.js.map"}